generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum OrderStatus {
    PENDING
    SUCCEEDED
    CANCELLED
}

enum UserRole {
    USER
    ADMIN
}

model User {
    id Int @id @default(autoincrement())

    role UserRole @default(USER)

    providerId String?
    provider   String?

    fullName String
    email    String @unique
    password String

    cart      Cart?
    cartItems CartItem[]
    orders    Order[]

    verificationCode VerificationCode?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Category {
    id Int @id @default(autoincrement())

    name     String    @unique
    products Product[]
}

model Product {
    id Int @id @default(autoincrement())

    name     String
    imageUrl String

    items ProductItem[]

    categoryId Int
    category   Category @relation(fields: [categoryId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ProductItem {
    id Int @id @default(autoincrement())

    price Int
    size  String
    color String

    cartItems CartItem[]

    productId Int
    product   Product @relation(fields: [productId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Cart {
    id Int @id @default(autoincrement())

    userId Int?  @unique
    user   User? @relation(fields: [userId], references: [id])

    tokenId String?

    cartItems CartItem[]

    totalAmount Int @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model CartItem {
    id Int @id @default(autoincrement())

    userId Int?
    user   User? @relation(fields: [userId], references: [id])

    productItemId Int
    productItem   ProductItem @relation(fields: [productItemId], references: [id])

    cartId Int
    cart   Cart @relation(fields: [cartId], references: [id])

    quantity Int @default(1)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Order {
    id Int @id @default(autoincrement())

    userId Int
    user   User @relation(fields: [userId], references: [id])

    items Json?

    status      OrderStatus @default(PENDING)
    totalAmount Int
    paymentId   String?

    fullName String
    address  String
    email    String
    phone    String
    comment  String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationCode {
    id Int @id @default(autoincrement())

    userId Int  @unique
    user   User @relation(fields: [userId], references: [id])

    code String

    createdAt DateTime @default(now())
    expiresAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId, code])
}
